Architecture

-On a séparé l'appli en différents packages qui représentent chacun un aspect de l'application (ex : recettes, liste de courses, cuisine,...)
On a fait ça pour rendre plus lisible l'application sur Eclipse et puis pour que chacun retrouve rapidement son propre travail (car un package entier est codé généralement par un même petit groupe)

- Puis des packages généraux, base de données et classes communes qui centralisent les ressources de l'appli (notamment le menu principal, les classes sur lequel on s'appuie dans toute l'appli, à savoir produit et ingrédient,
et la base de données des produits et des recettes que l'on a implantées au démarrage)

- Comme on peut le voir, chaque classe comporte au minimum la classe principale, qui porte généralement le nom du package, une classe qui dépend d'elle et une vue qui permet de traduire visuellement les différentes méthodes
Ce package représente le minimum, mais pour certains packages comme recettes il y a beaucoup d'autres classes, comme par ex une classe pour redimensionner une image.

Difficultés

Durant la réal du projet on a rencontré pas mal de problèmes, auquel on a apporté plusieurs solutions.
Parmi les principales difficultés que l'on a eu :

- Celle de mettre à jour une vue, notamment le texte, en fonction de l'appui de certains boutons (comme par ex augmenter le nombre de personnes pour la recette)
-> Modèle MVC (modèle vue controleur) que l'on a vu en cours sur les interfaces : il permet de décentraliser les actions de la vue le controleur s'occupe des boutons et de leurs actions
alors que la vue permet simplement d'afficher l'ensemble

- Celle de modifier les infos d'une autre vue (ex quand on ajoute les ingrédients d'une recette à une liste de course) 
-> on a créé des méthodes en dehors des vues qui prenait en paramètre des vues d'autres packages et qui mettait à jour l'affichage
Ainsi lors de l'exécution de la vue, elle se met à jour en permanence.

- Celle d'afficher le même bouton sur plusieurs lignes différentes (par exemple sur la vie liste de courses il y a 3 boutons par produit).
En effet, on ne peut pas définir tous les boutons dans la vue car on ne connait pas la longueur de la liste de courses à l'avance. Du coup on est obligé de faire une boucle for sur la liste des produits dans la liste de courses, 
de créer 3 boutons dans ce cas, pour chaque produit, et d'ajouter tous ces boutons dans une liste de boutons.
Ensuite, on associe à chaque bouton de la liste son action associée.